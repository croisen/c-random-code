#!/usr/bin/env bash


if ! command -v factor &>/dev/null; then
	gcd() { 
		if [[ $(($1 % $2)) -eq 0 ]]; then
			echo $2
		else
			echo $(gcd $2 $(($1 % $2)))
		fi
	}

	g_function() {
		echo $(((($1*$1) + 1) % $2)) 
	}

	croi_factor() {
		x=2
		y=2
		d=1

		while [[ $d -eq 1 ]]; do
			x=$(g_function $x $1)
			y=$(g_function $(g_function $y $1) $1)
			x_y=$(($x - $y))
			d=$(gcd ${x_y#-} $1)

			if [[ $d -gt 1 ]]; then
				echo $d
			fi
		done
	}
fi

problem_01() {
	result=0

	for i in {3..999}; do
		if [[ $(($i % 3)) == 0 ]]; then
			result=$(($result+$i))
		elif [[ $(($i % 5)) == 0 ]]; then
			result=$(($result+$i))
		fi
	done
	
	echo $result
}

problem_02() {
	result=0
	fib_a=0
	fib_b=1

	while [[ $fib_a -lt 4000000 ]]; do
		fib_c=$(($fib_a + $fib_b))
		fib_a=$fib_b
		fib_b=$fib_c

		if [[ $(($fib_a % 2)) == 0 ]]; then
			result=$(($result+$fib_a))
		fi
	done

	echo $result
}

problem_03() {
	num_1=600851475143

	if command -v factor &>/dev/null; then
		result=$(factor $num_1 | awk '{print $NF}')
	elif ! command -v factor &>/dev/null; then
		echo "factor command cannot be found"
		return 1
	fi

	echo $result
}

problem_04() {
	current_highest=0

	for x in {900..999}; do
		for y in {900..999}; do
			product=$(($x*$y))

			if [[ $product == $(echo $product | rev) ]]; then
				printf '\rCurrent palindrome: %s' $product
				
				if [[ $product > $current_highest ]]; then
					current_highest=$product
				fi
			fi
		done
	done

	result=$current_highest
	printf '\nHighest product is: %s\n' $result
}

problem_05() {
	high_search=3500000
	low_search=3000000
	current_lowest=$high_search
	divisors=20

	for x in $(seq $high_search -1 $low_search); do	
		pass_rate=0
		for i in $(seq $divisors); do
			printf '\rCurrently trying: %-10s, pass rate: %-2s' $x $pass_rate
			if [[ $(($x % $i)) -eq 0 ]]; then
				pass_rate=$(($pass_rate + 1))	
			elif [[ $(($x % $i)) -ne 0 ]]; then
				break
			fi

			if [[ $pass_rate -eq $divisors ]] && [[ $x -lt $current_lowest ]]; then
				current_lowest=$x
				printf '\n%s is a new low\n' $x
			fi
		done
	done

	if [[ $current_lowest -ne $high_search ]]; then
		printf '%s is the lowest\n' $current_lowest
	else
		printf '\nCannot find a number that is divisible by 1 through %s within search range %s - %s\n' $divisors $low_search $high_search
	fi

}

problem_06() {
	sums_of_squared=0
	reg_sum=0

	for i in $(seq 100); do
		sums_of_squared=$(($sums_of_squared+$(($i*$i))))
		reg_sum=$(($reg_sum+$i))
	done
	
	squared_sum=$(($reg_sum*$reg_sum))
	result=$(($squared_sum-$sums_of_squared))

	echo $result
}

problem_07() {
	x=12
	count=4
	final_count=10001
	primes_array=(2 5 7 9 11)

	while [[ $count -lt $(($final_count + 1)) ]]; do
		for prime in $(printf '%s\n' ${primes_array[@]} | sort -u); do
			if [[ $(($x % $prime)) -eq 0 ]]; then
				x=$(($x + 1))
				break
			elif [[ $x -eq $prime ]]; then
				x=$(($x + 1))
				break
			elif [[ $(echo 'scale=5;' sqrt\($x\) | bc) =~ \.0+$ ]]; then
				x=$(($x + 1))
				break
			else
				echo $x
				primes_array+=($x)
				count=$(($count + 1))
			fi
		done
	done

	echo The $final_count prime number is ${primes_array[-1]}
}

problem_08() {
	thousand_long_list="7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

}
