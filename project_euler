#!/usr/bin/env bash


if ! command -v factor; then
	gcd() { 
		if [[ $(($1 % $2)) -eq 0 ]]; then
			echo $2
		else
			echo $(gcd $2 $(($1 % $2)))
		fi
	}

	g_function() {
		echo $(((($1*$1) + 1) % $2)) 
	}

	croi_factor() {
		x=2
		y=2
		d=1

		while [[ $d -eq 1 ]]; do
			x=$(g_function $x $1)
			y=$(g_function $(g_function $y $1) $1)
			x_y=$(($x - $y))
			d=$(gcd ${x_y#-} $1)

			if [[ $d -gt 1 ]]; then
				echo $d
			fi
		done
	}
fi

problem_01() {
	result=0

	for i in {3..999}; do
		if [[ $(($i % 3)) == 0 ]]; then
			result=$(($result+$i))
		elif [[ $(($i % 5)) == 0 ]]; then
			result=$(($result+$i))
		fi
	done
	
	echo $result
}

problem_02() {
	result=0
	fib_a=0
	fib_b=1

	while [[ $fib_a -lt 4000000 ]]; do
		fib_c=$(($fib_a + $fib_b))
		fib_a=$fib_b
		fib_b=$fib_c

		if [[ $(($fib_a % 2)) == 0 ]]; then
			result=$(($result+$fib_a))
		fi
	done

	echo $result
}

problem_03() {
	num_1=600851475143

	if command -v factor &>/dev/null; then
		result=$(factor $num_1 | awk '{print $NF}')
	elif ! command -v factor &>/dev/null; then
		echo "factor command cannot be found"
		return 1
	fi

	echo $result
}

problem_04() {
	current_highest=0

	for x in {900..999}; do
		for y in {900..999}; do
			product=$(($x*$y))

			if [[ $product == $(echo $product | rev) ]]; then
				printf '\rCurrent palindrome: %s' $product
				
				if [[ $product > $current_highest ]]; then
					current_highest=$product
				fi
			fi
		done
	done

	result=$current_highest
	printf '\nHighest product is: %s\n' $result
}

problem_05() {
	high_search=1000000
	low_search=1
	current_lowest=$high_search
	divisors=20

	for x in $(seq $high_search -1 $low_search); do	
		pass_rate=0
		for i in $(seq $divisors); do
			printf '\rCurrently trying %-10s' $x
			if [[ $(($x % $i)) -eq 0 ]]; then
				pass_rate=$(($pass_rate + 1))	
			elif [[ $(($x % $i)) -ne 0 ]]; then
				break
			fi

			if [[ $pass_rate -eq $divisors ]] && [[ $x -lt $current_lowest ]]; then
				current_lowest=$x
				printf '\n%s is a new low\n' $x
			fi
		done
	done

	if [[ $current_lowest -eq $high_search ]]; then
		printf '%s is the lowest\n' $current_lowest
	fi

}

problem_06() {
	sums_of_squared=0
	reg_sum=0

	for i in $(seq 100); do
		sums_of_squared=$(($sums_of_squared+$(($i*$i))))
		reg_sum=$(($reg_sum+$i))
	done
	
	squared_sum=$(($reg_sum*$reg_sum))
	result=$(($squared_sum-$sums_of_squared))

	echo $result
}

problem_07() {
	for i in $(seq 10001); do
		## Prime number generator, idk how tho
		echo $i
	done
}